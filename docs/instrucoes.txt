Guia Rápido para Rodar o Projeto de Exemplo IrrigaFlow

Pré-requisitos:
- Python 3.x instalado
- Docker Desktop instalado e rodando
- Biblioteca Python necessária:
  pip install -r requirements.txt

Docker:
Arquivo docker-compose.yml:
version: '3.8'
services:
  mosquitto:
    image: eclipse-mosquitto:latest
    ports:
      - "1883:1883"
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log

  nodered:
    image: nodered/node-red:latest
    ports:
      - "1880:1880"
    volumes:
      - ./borda:/data
    depends_on:
      - mosquitto

Rodar containers:
docker-compose up -d

Ver logs:
docker-compose logs -f

Node-RED:
- Acesse http://localhost:1880
- Importe o fluxo JSON abaixo diretamente na interface:
[
    {
        "id": "1a2b3c4d5e6f7g8h",
        "type": "tab",
        "label": "Fluxo Tamagochi 3.0",
        "disabled": false,
        "info": ""
    },
    {
        "id": "mqtt_in_1",
        "type": "mqtt in",
        "z": "1a2b3c4d5e6f7g8h",
        "name": "Recebe umidade do Tamagochi",
        "topic": "bichinho/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "mqtt_broker",
        "x": 180,
        "y": 100,
        "wires": [["function_decisao"]]
    },
    {
        "id": "function_decisao",
        "type": "function",
        "z": "1a2b3c4d5e6f7g8h",
        "name": "Decide Irrigação",
        "func": "// Recebe msg.payload com a umidade numérica\nvar umidade = parseInt(msg.payload);\nvar acao;\nif (umidade < 40) {\n    acao = \"ATIVADA\";\n} else {\n    acao = \"DESLIGADA\";\n}\nmsg.payload = umidade + \"|\" + acao;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 400,
        "y": 100,
        "wires": [["mqtt_out"]]
    },
    {
        "id": "mqtt_out",
        "type": "mqtt out",
        "z": "1a2b3c4d5e6f7g8h",
        "name": "Envia para Cloud Logger",
        "topic": "decisao/irrigacao",
        "qos": "0",
        "retain": "false",
        "broker": "mqtt_broker",
        "x": 650,
        "y": 100,
        "wires": []
    },
    {
        "id": "mqtt_broker",
        "type": "mqtt-broker",
        "name": "Mosquitto Local",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closePayload": "",
        "willTopic": "",
        "willPayload": "",
        "willQos": "0"
    }
]
- Configure o broker MQTT:
  Host: mosquitto
  Port: 1883

Rodar módulos Python:
Simulador de sensores (IoT):
cd iot
python sensor_sim.py

Cloud Logger (Nuvem):
cd nuvem
python cloud_logger.py
- Salva histórico em log_irrigacao.csv
- Mostra painel de decisões no terminal

Visualização:
- Terminal Cloud Logger mostrará as decisões e histórico.
- Node-RED mostrará fluxo visual e decisões em http://localhost:1880

Parar e limpar:
docker-compose down
- Mantém imagens baixadas

docker system prune -a
- Remove todas as imagens e containers parados

O projeto está pronto para estudo e demonstração: IoT → Borda → Nuvem.
